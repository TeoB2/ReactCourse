{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kaffeina\\\\Desktop\\\\ReactCourse-main\\\\FoodOrderApp\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\n//import components\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //update the cart\n\nconst cartReducer = (state, action) => {\n  //add item\n  if (action.type === \"ADD\") {\n    //search item into the cart\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //get item \n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updateItems;\n\n    if (existingCartItem) {\n      //update amount\n      const updateItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updateItems = [...state.items];\n      updateItems[existingCartItemIndex] = updateItem;\n    } else {\n      //add item\n      updateItems = state.items.concat(action.item);\n    } //update total amount\n\n\n    const totalUpdateAmount = state.totalAmount + action.item.price * action.item.amount; //return new cart\n\n    return {\n      items: updateItems,\n      totalAmount: totalUpdateAmount\n    };\n  } //remove item\n  else if (action.type === \"REMOVE\") {\n    //search item into the cart\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id); //get item \n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updateItems;\n\n    if (existingCartItem) {\n      //update amount\n      const updateItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      }; //if amount is minor than 1 I remove the item\n\n      if (updateItem.amount < 1) {\n        updateItems = state.items.filter(item => item.id !== action.id);\n      } else {\n        //update item\n        updateItems = [...state.items];\n        updateItems[existingCartItemIndex] = updateItem;\n      } //update total amount\n\n\n      const totalUpdateAmount = state.totalAmount - existingCartItem.price; //return new cart\n\n      return {\n        items: updateItems,\n        totalAmount: totalUpdateAmount\n      };\n    }\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  //useReducer hook for update cartState\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //add item to the cart\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  }; //remove item to the cart\n\n\n  const removeItemToCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemToCartHandler\n  }; //return a CartContext Provider with cart as value\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 17\n  }, this);\n}; //export component\n\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Kaffeina/Desktop/ReactCourse-main/FoodOrderApp/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","existingCartItem","updateItems","updateItem","amount","concat","totalUpdateAmount","price","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemToCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["//import components\r\nimport { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount: 0\r\n};\r\n\r\n//update the cart\r\nconst cartReducer = (state, action) => {\r\n    //add item\r\n    if(action.type === \"ADD\")\r\n    {\r\n        //search item into the cart\r\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\r\n\r\n        //get item \r\n        const existingCartItem = state.items[existingCartItemIndex];\r\n        \r\n        let updateItems;\r\n\r\n        if(existingCartItem)\r\n        {\r\n            //update amount\r\n            const updateItem = {\r\n                ...existingCartItem,\r\n                amount: existingCartItem.amount + action.item.amount\r\n            };\r\n\r\n            updateItems = [...state.items]\r\n            updateItems[existingCartItemIndex] = updateItem;\r\n        }\r\n        else\r\n        {\r\n            //add item\r\n            updateItems = state.items.concat(action.item);\r\n        }\r\n\r\n        //update total amount\r\n        const totalUpdateAmount = state.totalAmount + action.item.price * action.item.amount;\r\n\r\n        //return new cart\r\n        return {\r\n            items: updateItems,\r\n            totalAmount: totalUpdateAmount\r\n        };\r\n    }\r\n    //remove item\r\n    else if(action.type === \"REMOVE\")\r\n    {\r\n        //search item into the cart\r\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\r\n\r\n        //get item \r\n        const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n        let updateItems;\r\n        \r\n        if(existingCartItem)\r\n        {\r\n            //update amount\r\n            const updateItem = {\r\n                ...existingCartItem,\r\n                amount: existingCartItem.amount - 1\r\n            };\r\n\r\n            //if amount is minor than 1 I remove the item\r\n            if(updateItem.amount < 1)\r\n            {\r\n                updateItems = state.items.filter(item => item.id !== action.id);\r\n            }\r\n            else\r\n            {\r\n                //update item\r\n                updateItems = [...state.items]\r\n                updateItems[existingCartItemIndex] = updateItem;\r\n            }\r\n\r\n            //update total amount\r\n            const totalUpdateAmount = state.totalAmount - existingCartItem.price;\r\n\r\n            //return new cart\r\n            return {\r\n                items: updateItems,\r\n                totalAmount: totalUpdateAmount\r\n            };\r\n        }\r\n    }\r\n\r\n    return defaultCartState;\r\n};\r\n\r\nconst CartProvider = props => {\r\n    //useReducer hook for update cartState\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n    //add item to the cart\r\n    const addItemToCartHandler = item => {\r\n        dispatchCartAction({type: 'ADD', item: item});\r\n    };\r\n\r\n    //remove item to the cart\r\n    const removeItemToCartHandler = id => {\r\n        dispatchCartAction({type: 'REMOVE', id: id});\r\n    };\r\n\r\n\r\n    const cartContext = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemToCartHandler\r\n    }\r\n\r\n    //return a CartContext Provider with cart as value\r\n    return  (\r\n                <CartContext.Provider value={cartContext}>\r\n                    {props.children}\r\n                </CartContext.Provider>\r\n            );\r\n};\r\n\r\n//export component\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}